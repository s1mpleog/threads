generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  userName      String?      @unique
  bio           String?      @db.Text
  accounts      Account[]
  sessions      Session[]
  Threads       Thread[]
  threadslikes  ThreadLike[]
  followers     Follow[]     @relation("Followers")
  following     Follow[]     @relation("Following")
  Comment       Comment[]
  replies       Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id          String       @id @default(uuid())
  postMessage String       @db.Text
  postImage   String       @db.Text
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id])
  likes       ThreadLike[]
  comments    Comment[]
}

model ThreadLike {
  id           String @id @default(uuid())
  recivedLikes String @default("0")
  threadId     String
  userId       String
  Thread       Thread @relation(fields: [threadId], references: [id])
  user         User   @relation(fields: [userId], references: [id])
}

model Follow {
  id          String @id @default(uuid())
  followersId String
  followingId String
  followers   User   @relation("Followers", fields: [followersId], references: [id])
  following   User   @relation("Following", fields: [followingId], references: [id])

  @@unique([followersId, followingId])
}

model Comment {
  id           String   @id @default(uuid())
  content      String   @db.Text
  threadPostId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  authorId     String?
  author       User?    @relation(fields: [authorId], references: [id])
  threadId     Thread   @relation(fields: [threadPostId], references: [id])
  replies      Reply[]
}

model Reply {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
}
